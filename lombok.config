# ###### GLOBAL LOMBOK CONFIGURATION ######
# This global configuration is inherited by all other modules, child directories and packages. Therefore it should only
# contain a small set of configurations that are suitable for every module.
#
# It is possible to have multiple config files on different levels in the project hierarchy. This allows you to
# override and/or extend the configuration keys defined here, also the configuration keys that take lists (use the +=
# syntax to add an entry or "-=" to remove an entry). The one closer to the class or member takes precedence.
#
# Otherwise you can completely turn off looking at parent directories for more configuration files by setting
# "config.stopBubbling = true" (not recommended in locations other than the project's root directory).
#
# And finally, you can use the clear lombok.(anyConfigKey) directive. It restores any configuration key to its default
# value. If someone changed the value of the given key in any parent config file, it would then be ignored. Use the
# directive clear, followed by any Lombok config key, for example "clear lombok.addNullAnnotations".

# ###### DEFAULT CONFIGURATIONS ######
# This option tells the configuration system not to search for config files in the parent directories. It is a good
# practice to add this property to the root of your project. By default, its value is false.
#
# Usage: lombok.stopBubbling = true | false
config.stopBubbling = true

# If true, Lombok will mark all generated methods with the @lombok.Generated. That comes in handy when removing
# Lombok-generated methods from package scanning or code coverage tools.
#
# Usage: lombok.addLombokGeneratedAnnotation = true | false
lombok.addLombokGeneratedAnnotation = true

# When added to a field, Lombok will copy those annotations to constructors, getters and setters related to the
# field. A typical use case for this feature is bean definitions with Spring, where the annotations @Qualifier and
# @Value frequently have to be copied to the constructor arguments.
#
# Usage: lombok.copyableAnnotations += <TypeName: fully-qualified annotation class name>
lombok.copyableAnnotations += org.springframework.beans.factory.annotation.Qualifier
lombok.copyableAnnotations += org.springframework.beans.factory.annotation.Value
lombok.copyableAnnotations += org.springframework.context.annotation.Lazy